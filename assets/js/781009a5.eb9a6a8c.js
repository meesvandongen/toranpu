"use strict";(self.webpackChunktoranpu_docs=self.webpackChunktoranpu_docs||[]).push([[416],{7522:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(9901);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=m(n),c=r,k=d["".concat(u,".").concat(c)]||d[c]||p[c]||l;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=n(5248),r=(n(9901),n(7522));const l={},o=void 0,i={unversionedId:"Klondike",id:"Klondike",title:"Klondike",description:"drawFromStock",source:"@site/../toranpu/docs/Klondike.md",sourceDirName:".",slug:"/Klondike",permalink:"/toranpu/Klondike",draft:!1,editUrl:"https://github.com/meesvandongen/toranpu/tree/main/packages/toranpu-docs/../toranpu/docs/Klondike.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Deck",permalink:"/toranpu/Deck"}},u={},m=[{value:"<code>drawFromStock</code>",id:"drawfromstock",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"<code>getCanMoveFromStock</code>",id:"getcanmovefromstock",level:2},{value:"Arguments",id:"arguments-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"<code>getCanMoveFromTableau</code>",id:"getcanmovefromtableau",level:2},{value:"Arguments",id:"arguments-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"<code>getIsWinningState</code>",id:"getiswinningstate",level:2},{value:"Arguments",id:"arguments-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"<code>getTableauCards</code>",id:"gettableaucards",level:2},{value:"Arguments",id:"arguments-4",level:3},{value:"Returns",id:"returns-4",level:3},{value:"<code>moveFromStock</code>",id:"movefromstock",level:2},{value:"Arguments",id:"arguments-5",level:3},{value:"Returns",id:"returns-5",level:3},{value:"<code>moveFromTableau</code>",id:"movefromtableau",level:2},{value:"Arguments",id:"arguments-6",level:3},{value:"Returns",id:"returns-6",level:3},{value:"<code>setupGame</code>",id:"setupgame",level:2},{value:"Arguments",id:"arguments-7",level:3},{value:"Returns",id:"returns-7",level:3}],s={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"drawfromstock"},(0,r.kt)("inlineCode",{parentName:"h2"},"drawFromStock")),(0,r.kt)("p",null,"Draws a single card from the stock and places it in the discard pile. If the\nstock is empty, the discard pile is restored to the stock."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { drawFromStock } from "toranpu";\n\ndrawFromStock(state)\n')),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Void"),") undefined"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getcanmovefromstock"},(0,r.kt)("inlineCode",{parentName:"h2"},"getCanMoveFromStock")),(0,r.kt)("p",null,"Checks if a card can be moved from the stock to the tableau or foundation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { getCanMoveFromStock } from "toranpu";\n\ngetCanMoveFromStock(state, destination)\n')),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination")," (",(0,r.kt)("em",{parentName:"li"},"Union"),"): The destination to move the card to.")),(0,r.kt)("h3",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Boolean"),") ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the move is valid, ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getcanmovefromtableau"},(0,r.kt)("inlineCode",{parentName:"h2"},"getCanMoveFromTableau")),(0,r.kt)("p",null,"Checks if cards can be moved from the tableau to the foundation or another\ntableau column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { getCanMoveFromTableau } from "toranpu";\n\ngetCanMoveFromTableau(state, source, destination)\n')),(0,r.kt)("h3",{id:"arguments-2"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"source")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The source of the cards"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination")," (",(0,r.kt)("em",{parentName:"li"},"Union"),"): The destination of the cards")),(0,r.kt)("h3",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Boolean"),") ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the cards can be moved, ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getiswinningstate"},(0,r.kt)("inlineCode",{parentName:"h2"},"getIsWinningState")),(0,r.kt)("p",null,"Checks if the game is won."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { getIsWinningState } from "toranpu";\n\ngetIsWinningState(state)\n')),(0,r.kt)("h3",{id:"arguments-3"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state.")),(0,r.kt)("h3",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Boolean"),") true if the game is won, false otherwise."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gettableaucards"},(0,r.kt)("inlineCode",{parentName:"h2"},"getTableauCards")),(0,r.kt)("p",null,"Gets a list of cards from the tableau. Does not remove the cards from the\ntableau."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { getTableauCards } from "toranpu";\n\ngetTableauCards(state, columnIndex, deckIndex)\n')),(0,r.kt)("h3",{id:"arguments-4"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"columnIndex")," (",(0,r.kt)("em",{parentName:"li"},"Number"),"): The index of the column to get cards from"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deckIndex")," (",(0,r.kt)("em",{parentName:"li"},"Number"),"): The starting index of the deck to get cards from")),(0,r.kt)("h3",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Type"),") A list of cards from the tableau."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"movefromstock"},(0,r.kt)("inlineCode",{parentName:"h2"},"moveFromStock")),(0,r.kt)("p",null,"Move a card from the stock to the tableau or foundation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { moveFromStock } from "toranpu";\n\nmoveFromStock(state, destination)\n')),(0,r.kt)("h3",{id:"arguments-5"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination")," (",(0,r.kt)("em",{parentName:"li"},"Union"),"): The destination to move the card to.")),(0,r.kt)("h3",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Void"),") undefined"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"movefromtableau"},(0,r.kt)("inlineCode",{parentName:"h2"},"moveFromTableau")),(0,r.kt)("p",null,"Moves a card from the tableau to the foundation or another tableau column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { moveFromTableau } from "toranpu";\n\nmoveFromTableau(state, source, destination)\n')),(0,r.kt)("h3",{id:"arguments-6"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"state")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The game state"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"source")," (",(0,r.kt)("em",{parentName:"li"},"Interface"),"): The source of the card"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"destination")," (",(0,r.kt)("em",{parentName:"li"},"Union"),"): The destination of the card")),(0,r.kt)("h3",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Void"),") undefined"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"setupgame"},(0,r.kt)("inlineCode",{parentName:"h2"},"setupGame")),(0,r.kt)("p",null,"Setup a game of Klondike"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { setupGame } from "toranpu";\n\nsetupGame(seed)\n')),(0,r.kt)("h3",{id:"arguments-7"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"seed")," (",(0,r.kt)("em",{parentName:"li"},"String"),"): The seed to use for shuffling the deck")),(0,r.kt)("h3",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,"(",(0,r.kt)("em",{parentName:"p"},"Interface"),") The game state"))}d.isMDXComponent=!0}}]);